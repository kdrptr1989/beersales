// <auto-generated />
using System;
using BeerSales.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BeerSales.Infrastructure.Migrations
{
    [DbContext(typeof(BeerSaleDbContext))]
    partial class BeerSaleDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BeerSales.Domain.Entities.Beer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AlcoholContent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("BreweryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BreweryId");

                    b.ToTable("Beers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9a458ff1-068c-42e4-8ecd-673d46a07c2f"),
                            AlcoholContent = 6.6m,
                            BreweryId = new Guid("8e489942-f9ca-47a9-9781-df6c08a962cb"),
                            CreatedDate = new DateTime(2022, 10, 24, 16, 10, 0, 153, DateTimeKind.Utc).AddTicks(1765),
                            Currency = "EUR",
                            Name = "Leffe Blonde",
                            Price = 2.3m
                        },
                        new
                        {
                            Id = new Guid("b5f51183-6eaa-4533-9a97-992d0323e9bb"),
                            AlcoholContent = 4.5m,
                            BreweryId = new Guid("ea11c974-a835-4161-9fd4-b4d40b6af996"),
                            CreatedDate = new DateTime(2022, 10, 24, 16, 10, 0, 153, DateTimeKind.Utc).AddTicks(1766),
                            Currency = "EUR",
                            Name = "Heineken Silver",
                            Price = 1.5m
                        },
                        new
                        {
                            Id = new Guid("961fd882-f6e3-4444-ad5b-d80dc7aa80fa"),
                            AlcoholContent = 5.6m,
                            BreweryId = new Guid("2d066bf1-8cea-4933-8562-1ddf8bc77131"),
                            CreatedDate = new DateTime(2022, 10, 24, 16, 10, 0, 153, DateTimeKind.Utc).AddTicks(1767),
                            Currency = "EUR",
                            Name = "Guinness Draught",
                            Price = 2.6m
                        });
                });

            modelBuilder.Entity("BeerSales.Domain.Entities.Brewery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Breweries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e489942-f9ca-47a9-9781-df6c08a962cb"),
                            CreatedDate = new DateTime(2022, 10, 24, 16, 10, 0, 153, DateTimeKind.Utc).AddTicks(1260),
                            Name = "Abbaye de Leffe"
                        },
                        new
                        {
                            Id = new Guid("ea11c974-a835-4161-9fd4-b4d40b6af996"),
                            CreatedDate = new DateTime(2022, 10, 24, 16, 10, 0, 153, DateTimeKind.Utc).AddTicks(1265),
                            Name = "Heineken"
                        },
                        new
                        {
                            Id = new Guid("2d066bf1-8cea-4933-8562-1ddf8bc77131"),
                            CreatedDate = new DateTime(2022, 10, 24, 16, 10, 0, 153, DateTimeKind.Utc).AddTicks(1266),
                            Name = "Gunniess"
                        });
                });

            modelBuilder.Entity("BeerSales.Domain.Entities.Discount", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TierFrom")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Discounts");

                    b.HasData(
                        new
                        {
                            id = new Guid("28652824-28ba-4dde-8812-240d453b6fe8"),
                            CreatedDate = new DateTime(2022, 10, 24, 16, 10, 0, 153, DateTimeKind.Utc).AddTicks(2741),
                            DiscountPercentage = 10m,
                            TierFrom = 11
                        },
                        new
                        {
                            id = new Guid("a094d126-fb1e-4192-ae3e-b9c48bbf3602"),
                            CreatedDate = new DateTime(2022, 10, 24, 16, 10, 0, 153, DateTimeKind.Utc).AddTicks(2744),
                            DiscountPercentage = 20m,
                            TierFrom = 21
                        });
                });

            modelBuilder.Entity("BeerSales.Domain.Entities.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BeerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("WholesalerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BeerId");

                    b.HasIndex("WholesalerId");

                    b.ToTable("Stocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("58d77151-46f5-4773-9740-8af1e15887e1"),
                            BeerId = new Guid("9a458ff1-068c-42e4-8ecd-673d46a07c2f"),
                            CreatedDate = new DateTime(2022, 10, 24, 16, 10, 0, 153, DateTimeKind.Utc).AddTicks(2412),
                            Quantity = 100,
                            WholesalerId = new Guid("3b2b2649-0a7b-459b-9195-bdf04dc33cd5")
                        },
                        new
                        {
                            Id = new Guid("8ce844af-9eb9-4686-8591-25cfafe7eadf"),
                            BeerId = new Guid("b5f51183-6eaa-4533-9a97-992d0323e9bb"),
                            CreatedDate = new DateTime(2022, 10, 24, 16, 10, 0, 153, DateTimeKind.Utc).AddTicks(2414),
                            Quantity = 50,
                            WholesalerId = new Guid("3b2b2649-0a7b-459b-9195-bdf04dc33cd5")
                        },
                        new
                        {
                            Id = new Guid("7e3d4de5-e9d0-4a0b-93cb-3d91c4319632"),
                            BeerId = new Guid("9a458ff1-068c-42e4-8ecd-673d46a07c2f"),
                            CreatedDate = new DateTime(2022, 10, 24, 16, 10, 0, 153, DateTimeKind.Utc).AddTicks(2415),
                            Quantity = 30,
                            WholesalerId = new Guid("3be8866e-da37-4cbb-9da8-f29317c53454")
                        },
                        new
                        {
                            Id = new Guid("09fcb33a-8345-4e26-bd78-e63c4d152a3a"),
                            BeerId = new Guid("b5f51183-6eaa-4533-9a97-992d0323e9bb"),
                            CreatedDate = new DateTime(2022, 10, 24, 16, 10, 0, 153, DateTimeKind.Utc).AddTicks(2416),
                            Quantity = 200,
                            WholesalerId = new Guid("3be8866e-da37-4cbb-9da8-f29317c53454")
                        },
                        new
                        {
                            Id = new Guid("9bfe7874-e106-42b0-8301-6d09bd6f5d81"),
                            BeerId = new Guid("961fd882-f6e3-4444-ad5b-d80dc7aa80fa"),
                            CreatedDate = new DateTime(2022, 10, 24, 16, 10, 0, 153, DateTimeKind.Utc).AddTicks(2417),
                            Quantity = 70,
                            WholesalerId = new Guid("3be8866e-da37-4cbb-9da8-f29317c53454")
                        },
                        new
                        {
                            Id = new Guid("435e9e7e-abd4-4d4a-8c29-208f81b386ec"),
                            BeerId = new Guid("9a458ff1-068c-42e4-8ecd-673d46a07c2f"),
                            CreatedDate = new DateTime(2022, 10, 24, 16, 10, 0, 153, DateTimeKind.Utc).AddTicks(2418),
                            Quantity = 300,
                            WholesalerId = new Guid("f401ed08-3908-4dc9-8354-2b616d713fec")
                        },
                        new
                        {
                            Id = new Guid("e0ae1c8e-dc03-491a-b344-a55b8a44241a"),
                            BeerId = new Guid("b5f51183-6eaa-4533-9a97-992d0323e9bb"),
                            CreatedDate = new DateTime(2022, 10, 24, 16, 10, 0, 153, DateTimeKind.Utc).AddTicks(2422),
                            Quantity = 20,
                            WholesalerId = new Guid("f401ed08-3908-4dc9-8354-2b616d713fec")
                        },
                        new
                        {
                            Id = new Guid("49e67567-e1ed-4e9a-b085-693fdcff990b"),
                            BeerId = new Guid("961fd882-f6e3-4444-ad5b-d80dc7aa80fa"),
                            CreatedDate = new DateTime(2022, 10, 24, 16, 10, 0, 153, DateTimeKind.Utc).AddTicks(2423),
                            Quantity = 40,
                            WholesalerId = new Guid("f401ed08-3908-4dc9-8354-2b616d713fec")
                        });
                });

            modelBuilder.Entity("BeerSales.Domain.Entities.Wholesaler", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Wholesalers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3b2b2649-0a7b-459b-9195-bdf04dc33cd5"),
                            CreatedDate = new DateTime(2022, 10, 24, 16, 10, 0, 153, DateTimeKind.Utc).AddTicks(2082),
                            Name = "GeneDrinks"
                        },
                        new
                        {
                            Id = new Guid("3be8866e-da37-4cbb-9da8-f29317c53454"),
                            CreatedDate = new DateTime(2022, 10, 24, 16, 10, 0, 153, DateTimeKind.Utc).AddTicks(2083),
                            Name = "AllBeerSales"
                        },
                        new
                        {
                            Id = new Guid("f401ed08-3908-4dc9-8354-2b616d713fec"),
                            CreatedDate = new DateTime(2022, 10, 24, 16, 10, 0, 153, DateTimeKind.Utc).AddTicks(2083),
                            Name = "Forever Beer"
                        });
                });

            modelBuilder.Entity("BeerSales.Domain.Entities.Beer", b =>
                {
                    b.HasOne("BeerSales.Domain.Entities.Brewery", "Brewery")
                        .WithMany("Beers")
                        .HasForeignKey("BreweryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brewery");
                });

            modelBuilder.Entity("BeerSales.Domain.Entities.Stock", b =>
                {
                    b.HasOne("BeerSales.Domain.Entities.Beer", "Beer")
                        .WithMany("Stocks")
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeerSales.Domain.Entities.Wholesaler", "Wholesaler")
                        .WithMany("Stocks")
                        .HasForeignKey("WholesalerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beer");

                    b.Navigation("Wholesaler");
                });

            modelBuilder.Entity("BeerSales.Domain.Entities.Beer", b =>
                {
                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("BeerSales.Domain.Entities.Brewery", b =>
                {
                    b.Navigation("Beers");
                });

            modelBuilder.Entity("BeerSales.Domain.Entities.Wholesaler", b =>
                {
                    b.Navigation("Stocks");
                });
#pragma warning restore 612, 618
        }
    }
}
